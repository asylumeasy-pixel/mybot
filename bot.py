#!/usr/bin/env python3
# coding: utf-8
from keep_alive import keep_alive
import telebot
import os
import csv
import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = "8396029873:AAHeu1coggukcGVMwCMx-nmm36VzVo7fuoo"   # <- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_ID = 7798853644          # <- —Ç–≤–æ–π ADMIN_ID (—á–∏—Å–ª–æ–º)
CSV_FILE = "ankety.csv"
GSHEET_NAME = "AsylumBotData"  # <- –∏–º—è Google Sheets

# ================== GOOGLE SHEETS SETUP ==================
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
try:
    sheet = client.open(GSHEET_NAME).sheet1
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Google Sheet '{GSHEET_NAME}': {e}")
    sheet = None

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==================
bot = telebot.TeleBot(TOKEN)
user_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å–µ—Å—Å–∏–∏ {user_id: {field: value, ...}}

# ================== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ==================
def save_data(data_dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –≤ CSV –∏ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ) –≤ Google Sheets."""
    headers = [
        "–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ò–º—è", "–ü—Ä–∏—á–∏–Ω–∞", "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ)",
        "–í–ù–ñ/2-–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–µ—Å—Ç—å –ª–∏)", "2-–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ / —Å—Ç—Ä–∞–Ω–∞ –í–ù–ñ",
        "–†–µ–≥–∏–æ–Ω (–ï–°/–°–®–ê)", "–ì–¥–µ –∏–º–µ–Ω–Ω–æ (–ï–°)", "–®–µ–Ω–≥–µ–Ω", "–ò–∑–≤–µ—Å—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç –≤ –ï–°",
        "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –ï–°",
        "–£–∂–µ –≤ –°–®–ê", "–ü–ª–∞–Ω –≤ –°–®–ê", "–ß–µ—Ä–µ–∑ –∫–æ–π–æ—Ç–æ–≤ (–º–µ—Ç–∫–∞)", "–ò–∑–≤–µ—Å—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç –≤ –ú–µ–∫—Å–∏–∫—É",
        "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ú–µ–∫—Å–∏–∫–∞)", "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑–∞ (–µ—Å—Ç—å –ª–∏)",
        "I-589", "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è (–µ—Å—Ç—å –ª–∏)", "–ò–Ω—Ç–µ—Ä–≤—å—é (—Å—Ç—Ä–∞—Ö/–ø—ã—Ç–∫–∏)", "–ö–∞–∫ –ø–æ–ø–∞–ª–∏ –≤ –°–®–ê"
    ]

    file_exists = os.path.isfile(CSV_FILE)
    with open(CSV_FILE, mode="a", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=headers)
        if not file_exists:
            writer.writeheader()
        writer.writerow({
            "–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏": data_dict.get("contact_method", "-"),
            "–ö–æ–Ω—Ç–∞–∫—Ç": data_dict.get("contact_info", "-"),
            "–ò–º—è": data_dict.get("name", "-"),
            "–ü—Ä–∏—á–∏–Ω–∞": data_dict.get("reason", "-"),
            "–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ)": data_dict.get("citizenship", "-"),
            "–í–ù–ñ/2-–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–µ—Å—Ç—å –ª–∏)": data_dict.get("residence", "-"),
            "2-–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ / —Å—Ç—Ä–∞–Ω–∞ –í–ù–ñ": data_dict.get("second_citizenship", "-"),
            "–†–µ–≥–∏–æ–Ω (–ï–°/–°–®–ê)": data_dict.get("target_country", "-"),
            "–ì–¥–µ –∏–º–µ–Ω–Ω–æ (–ï–°)": data_dict.get("where_exact", "-"),
            "–®–µ–Ω–≥–µ–Ω": data_dict.get("schengen", "-"),
            "–ò–∑–≤–µ—Å—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç –≤ –ï–°": data_dict.get("known_route_eu", "-"),
            "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –ï–°": data_dict.get("need_route_consultation_eu", "-"),
            "–£–∂–µ –≤ –°–®–ê": data_dict.get("already_in_usa", "-"),
            "–ü–ª–∞–Ω –≤ –°–®–ê": data_dict.get("plan_to_usa", "-"),
            "–ß–µ—Ä–µ–∑ –∫–æ–π–æ—Ç–æ–≤ (–º–µ—Ç–∫–∞)": data_dict.get("via_coyotes", "-"),
            "–ò–∑–≤–µ—Å—Ç–µ–Ω –º–∞—Ä—à—Ä—É—Ç –≤ –ú–µ–∫—Å–∏–∫—É": data_dict.get("known_route_mexico", "-"),
            "–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É (–ú–µ–∫—Å–∏–∫–∞)": data_dict.get("need_route_consultation", "-"),
            "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑–∞ (–µ—Å—Ç—å –ª–∏)": data_dict.get("tourist_visa", "-"),
            "I-589": data_dict.get("i589", "-"),
            "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è (–µ—Å—Ç—å –ª–∏)": data_dict.get("declaration", "-"),
            "–ò–Ω—Ç–µ—Ä–≤—å—é (—Å—Ç—Ä–∞—Ö/–ø—ã—Ç–∫–∏)": data_dict.get("interview", "-"),
            "–ö–∞–∫ –ø–æ–ø–∞–ª–∏ –≤ –°–®–ê": data_dict.get("how_entered_usa", "-"),
        })

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    if sheet is not None:
        try:
            sheet.append_row([
                data_dict.get("contact_method", "-"),
                data_dict.get("contact_info", "-"),
                data_dict.get("name", "-"),
                data_dict.get("reason", "-"),
                data_dict.get("citizenship", "-"),
                data_dict.get("residence", "-"),
                data_dict.get("second_citizenship", "-"),
                data_dict.get("target_country", "-"),
                data_dict.get("where_exact", "-"),
                data_dict.get("schengen", "-"),
                data_dict.get("known_route_eu", "-"),
                data_dict.get("need_route_consultation_eu", "-"),
                data_dict.get("already_in_usa", "-"),
                data_dict.get("plan_to_usa", "-"),
                data_dict.get("via_coyotes", "-"),
                data_dict.get("known_route_mexico", "-"),
                data_dict.get("need_route_consultation", "-"),
                data_dict.get("tourist_visa", "-"),
                data_dict.get("i589", "-"),
                data_dict.get("declaration", "-"),
                data_dict.get("interview", "-"),
                data_dict.get("how_entered_usa", "-"),
            ])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:", e)

# ================== –î–ò–ê–õ–û–ì =================================

# ---- /start ----
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üí¨ Telegram", "üìû WhatsApp")
    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
                     reply_markup=markup)
    bot.register_next_step_handler(message, handle_contact_method)

# ---- –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ ----
def handle_contact_method(message):
    user_id = message.from_user.id
    method = message.text.strip()
    user_data[user_id]["contact_method"] = method
    if "Telegram" in method:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–±–µ–∑ @):")
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è WhatsApp (–Ω–∞–ø—Ä–∏–º–µ—Ä +7...):")
    bot.register_next_step_handler(message, handle_contact_info)

def handle_contact_info(message):
    user_id = message.from_user.id
    user_data[user_id]["contact_info"] = message.text.strip()
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, handle_name)

def handle_name(message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text.strip()
    # –ü—Ä–∏—á–∏–Ω–∞ —É–±–µ–∂–∏—â–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üè≥Ô∏è‚Äçüåà –õ–ì–ë–¢–ö+", "‚úùÔ∏è –†–µ–ª–∏–≥–∏—è", "üó≥ –ü–æ–ª–∏—Ç–∏–∫–∞", "üè† –î–æ–º/–Ω–∞—Å–∏–ª–∏–µ", "‚ùì –ù–µ –∑–Ω–∞—é")
    bot.send_message(message.chat.id, "–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–±–µ–∂–∏—â–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_reason)

def handle_reason(message):
    user_id = message.from_user.id
    user_data[user_id]["reason"] = message.text.strip()
    bot.send_message(message.chat.id, "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?")
    bot.register_next_step_handler(message, handle_citizenship)

def handle_citizenship(message):
    user_id = message.from_user.id
    user_data[user_id]["citizenship"] = message.text.strip()
    # –ï—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ/–í–ù–ñ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id,
                     "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω—ã, –∫—Ä–æ–º–µ –≤–∞—à–µ–π —Ä–æ–¥–Ω–æ–π?",
                     reply_markup=markup)
    bot.register_next_step_handler(message, handle_second_citizenship_flag)

def handle_second_citizenship_flag(message):
    user_id = message.from_user.id
    ans = message.text.strip().lower()
    user_data[user_id]["residence"] = message.text.strip()  # –î–∞/–ù–µ—Ç
    if "–¥–∞" in ans:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ —É –≤–∞—Å –í–ù–ñ:")
        bot.register_next_step_handler(message, handle_second_citizenship)
    else:
        # —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞
        user_data[user_id]["second_citizenship"] = "-"
        ask_region(message)

def handle_second_citizenship(message):
    user_id = message.from_user.id
    user_data[user_id]["second_citizenship"] = message.text.strip()
    ask_region(message)

# ---- –†–µ–≥–∏–æ–Ω (–ï–° / –°–®–ê) ----
def ask_region(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üá™üá∫ –ï–≤—Ä–æ—Å–æ—é–∑", "üá∫üá∏ –°–®–ê")
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–±–µ–∂–∏—â–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_region)

def handle_region(message):
    user_id = message.from_user.id
    region = message.text.strip()
    user_data[user_id]["target_country"] = region
    if "–ï–≤—Ä–æ—Å–æ—é–∑" in region:
        ask_where_exact_eu(message)
    elif "–°–®–ê" in region:
        ask_already_in_usa(message)
    else:
        ask_region(message)

# ================== –í–ï–¢–ö–ê –ï–° ==================
def ask_where_exact_eu(message):
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–±–µ–∂–∏—â–µ?")
    bot.register_next_step_handler(message, handle_where_exact_eu)

def handle_where_exact_eu(message):
    user_id = message.from_user.id
    user_data[user_id]["where_exact"] = message.text.strip()
    # –®–µ–Ω–≥–µ–Ω
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –ï—Å—Ç—å", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —à–µ–Ω–≥–µ–Ω—Å–∫–∞—è –≤–∏–∑–∞?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_schengen_eu)

def handle_schengen_eu(message):
    user_id = message.from_user.id
    user_data[user_id]["schengen"] = message.text.strip()
    if "–µ—Å—Ç—å" in message.text.lower():
        finalize_and_thanks(message)
    else:
        # –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç –≤ –ï–°
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ò–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –≤–∞–º –º–∞—Ä—à—Ä—É—Ç, –∫–∞–∫–∏–º –º–æ–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –≤ –ï–≤—Ä–æ–ø—É?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_known_route_eu)

def handle_known_route_eu(message):
    user_id = message.from_user.id
    user_data[user_id]["known_route_eu"] = message.text.strip()
    if "–¥–∞" in message.text.lower():
        finalize_and_thanks(message)
    else:
        # –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_need_route_consultation_eu)

def handle_need_route_consultation_eu(message):
    user_id = message.from_user.id
    user_data[user_id]["need_route_consultation_eu"] = message.text.strip()
    finalize_and_thanks(message)

# ================== –í–ï–¢–ö–ê –°–®–ê ==================
def ask_already_in_usa(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –°–®–ê?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_already_in_usa)

def handle_already_in_usa(message):
    user_id = message.from_user.id
    ans = message.text.strip().lower()
    user_data[user_id]["already_in_usa"] = message.text.strip()
    if "–¥–∞" in ans:
        # –≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É–∂–µ –≤ –°–®–ê
        ask_schengen_when_entered(message)
    elif "–Ω–µ—Ç" in ans:
        # –≤–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –µ—â—ë –Ω–µ –≤ –°–®–ê
        ask_plan_to_usa(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        ask_already_in_usa(message)

# ---- –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ –°–®–ê ----
def ask_schengen_when_entered(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ë—ã–ª–∞ –ª–∏ —É –≤–∞—Å —à–µ–Ω–≥–µ–Ω—Å–∫–∞—è –≤–∏–∑–∞, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –°–®–ê?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_schengen_when_entered)

def handle_schengen_when_entered(message):
    user_id = message.from_user.id
    user_data[user_id]["schengen"] = message.text.strip()
    # –¥–∞–ª–µ–µ I-589
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ü–æ–¥–∞–Ω–∞ –ª–∏ —É –≤–∞—Å —Ñ–æ—Ä–º–∞ I-589 (–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–±–µ–∂–∏—â–µ)?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_i589)

def handle_i589(message):
    user_id = message.from_user.id
    user_data[user_id]["i589"] = message.text.strip()
    # –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ü–æ–¥–∞–Ω–∞ –ª–∏ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è (–∏—Å—Ç–æ—Ä–∏—è)?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_declaration)

def handle_declaration(message):
    user_id = message.from_user.id
    user_data[user_id]["declaration"] = message.text.strip()
    # –∏–Ω—Ç–µ—Ä–≤—å—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ü—Ä–æ–≤–æ–¥–∏–ª–∏ –ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ —Å—Ç—Ä–∞—Ö –∏–ª–∏ –ø—ã—Ç–∫–∏?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_interview)

def handle_interview(message):
    user_id = message.from_user.id
    user_data[user_id]["interview"] = message.text.strip()
    # –∫–∞–∫ –ø–æ–ø–∞–ª–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üõ¨ –ü–æ –≤–∏–∑–µ", "üöß –ß–µ—Ä–µ–∑ –∑–∞–±–æ—Ä", "üöó –ù–∞ –º–∞—à–∏–Ω–µ", "üåâ –ß–µ—Ä–µ–∑ –º–æ—Å—Ç", "üö∂ –ü–µ—à–∫–æ–º", "‚ùì –î—Ä—É–≥–æ–µ")
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –°–®–ê?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_how_entered_usa)

def handle_how_entered_usa(message):
    user_id = message.from_user.id
    user_data[user_id]["how_entered_usa"] = message.text.strip()
    finalize_and_thanks(message)

# ---- –î–ª—è —Ç–µ—Ö, –∫—Ç–æ –µ—â—ë –Ω–µ –≤ –°–®–ê ----
def ask_plan_to_usa(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("üåé –ß–µ—Ä–µ–∑ –ú–µ–∫—Å–∏–∫—É", "‚úàÔ∏è –ü–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –≤–∏–∑–µ –≤ –°–®–ê", "üèÉ‚Äç‚ôÇÔ∏è –ß–µ—Ä–µ–∑ –ú–µ–∫—Å–∏–∫—É, –Ω–æ –∫–æ–π–æ—Ç–∞–º–∏")
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–∞—Å—Ç—å –≤ –°–®–ê?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_plan_to_usa)

def handle_plan_to_usa(message):
    user_id = message.from_user.id
    plan = message.text.strip()
    user_data[user_id]["plan_to_usa"] = plan
    # –ø–æ–º–µ—Ç–∫–∞ –∫–æ–π–æ—Ç–æ–≤
    user_data[user_id]["via_coyotes"] = "–î–∞" if "–∫–æ–π–æ—Ç" in plan.lower() else "–ù–µ—Ç"
    if "–º–µ–∫—Å" in plan.lower() or "–∫–æ–π–æ—Ç" in plan.lower():
        ask_known_route_mexico(message)
    elif "—Ç—É—Ä–∏—Å—Ç" in plan.lower():
        ask_tourist_visa(message)
    else:
        ask_plan_to_usa(message)

def ask_known_route_mexico(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–ò–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –≤–∞–º —É–∂–µ –º–∞—Ä—à—Ä—É—Ç, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ú–µ–∫—Å–∏–∫–∏?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_known_route_mexico)

def handle_known_route_mexico(message):
    user_id = message.from_user.id
    user_data[user_id]["known_route_mexico"] = message.text.strip()
    if "–¥–∞" in message.text.lower():
        # —Å–ø—Ä–æ—Å–∏–º —à–µ–Ω–≥–µ–Ω –∏ —Ñ–∏–Ω–∞–ª
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –ï—Å—Ç—å", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —à–µ–Ω–≥–µ–Ω—Å–∫–∞—è –≤–∏–∑–∞?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_schengen_after_mexico_known)
    else:
        # —Å–ø—Ä–æ—Å–∏–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º–∞—Ä—à—Ä—É—Ç—É?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_need_route_consultation)

def handle_schengen_after_mexico_known(message):
    user_id = message.from_user.id
    user_data[user_id]["schengen"] = message.text.strip()
    finalize_and_thanks(message)

def handle_need_route_consultation(message):
    user_id = message.from_user.id
    user_data[user_id]["need_route_consultation"] = message.text.strip()
    finalize_and_thanks(message)

def ask_tourist_visa(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
    bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑–∞ –≤ –°–®–ê?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_tourist_visa)

def handle_tourist_visa(message):
    user_id = message.from_user.id
    ans = message.text.strip().lower()
    user_data[user_id]["tourist_visa"] = message.text.strip()
    if "–¥–∞" in ans:
        # —Å–ø—Ä–æ—Å–∏—Ç—å —à–µ–Ω–≥–µ–Ω
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –ï—Å—Ç—å", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç–∞–∫–∂–µ —à–µ–Ω–≥–µ–Ω—Å–∫–∞—è –≤–∏–∑–∞?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_schengen_after_tourist)
    else:
        # —Å–ø—Ä–æ—Å–∏–º –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –ª–∏ –≤—ã —É–∂–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø–æ—Å–æ–ª—å—Å—Ç–≤–µ –°–®–ê?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_visa_interview_registration)

def handle_schengen_after_tourist(message):
    user_id = message.from_user.id
    user_data[user_id]["schengen"] = message.text.strip()
    finalize_and_thanks(message)

def handle_visa_interview_registration(message):
    user_id = message.from_user.id
    user_data[user_id]["visa_interview_registered"] = message.text.strip()
    finalize_and_thanks(message)

# ================== –§–ò–ù–ê–õ –ò –û–¢–ü–†–ê–í–ö–ê ==================
def finalize_and_thanks(message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_data(data)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    summary_lines = [
        "üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:",
        f"–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {data.get('contact_method','-')}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact_info','-')}",
        f"–ò–º—è: {data.get('name','-')}",
        f"–ü—Ä–∏—á–∏–Ω–∞: {data.get('reason','-')}",
        f"–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ): {data.get('citizenship','-')}",
        f"2-–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ/–í–ù–ñ: {data.get('second_citizenship','-')}",
        f"–†–µ–≥–∏–æ–Ω: {data.get('target_country','-')}",
        f"–ì–¥–µ (–ï–°): {data.get('where_exact','-')}",
        f"–£–∂–µ –≤ –°–®–ê: {data.get('already_in_usa','-')}",
        f"–ü–ª–∞–Ω –≤ –°–®–ê: {data.get('plan_to_usa','-')}",
        f"–¢—É—Ä–∏—Å—Ç. –≤–∏–∑–∞: {data.get('tourist_visa','-')}",
        f"I-589: {data.get('i589','-')}",
        f"–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è: {data.get('declaration','-')}",
        f"–ò–Ω—Ç–µ—Ä–≤—å—é: {data.get('interview','-')}",
        f"–ö–∞–∫ –ø–æ–ø–∞–ª –≤ –°–®–ê: {data.get('how_entered_usa','-')}",
    ]
    summary = "\n".join(summary_lines)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–ø–æ–ø—Ä–æ–±—É–µ–º, –Ω–æ –Ω–µ —É–ø–∞–¥—ë–º –ø—Ä–∏ –æ—à–∏–±–∫–µ)
    try:
        bot.send_message(ADMIN_ID, summary)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É:", e)
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì¢ –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/your_group_here"))
    markup.add(types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url="https://t.me/your_consultation_here"))
    bot.send_message(message.chat.id, "üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=markup)
    # –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    user_data.pop(user_id, None)

# ================== –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ê ==================
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", callback_data="show_last"))
    markup.add(types.InlineKeyboardButton("üìä –°–∫–∞—á–∞—Ç—å CSV", callback_data="download_csv"))
    markup.add(types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="clear_data"))
    bot.send_message(message.chat.id, "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data in ["show_last", "download_csv", "clear_data"])
def handle_admin_actions(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´", show_alert=True)
        return
    if call.data == "show_last":
        if not os.path.exists(CSV_FILE):
            bot.send_message(call.message.chat.id, "‚ùå –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
            return
        with open(CSV_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()[-6:]
        bot.send_message(call.message.chat.id, "<pre>" + "".join(lines) + "</pre>", parse_mode="HTML")
    elif call.data == "download_csv":
        if os.path.exists(CSV_FILE):
            with open(CSV_FILE, "rb") as f:
                bot.send_document(call.message.chat.id, f)
        else:
            bot.send_message(call.message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif call.data == "clear_data":
        if os.path.exists(CSV_FILE):
            os.remove(CSV_FILE)
            bot.send_message(call.message.chat.id, "‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            bot.send_message(call.message.chat.id, "–ë–∞–∑–∞ —É–∂–µ –ø—É—Å—Ç–∞.")

# ================== –ó–ê–ü–£–°–ö ==================
if __name__ == '__main__':
    print("Bot is running...")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
